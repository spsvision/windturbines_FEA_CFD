# encoding: utf-8
# 2019 R1
SetScriptVersion(Version="19.3.111")
template1 = GetTemplate(
    TemplateName="Static Structural",
    Solver="ANSYS")
system1 = GetSystem(Name="FFF")
system2 = template1.CreateSystem(
    Position="Right",
    RelativeTo=system1)
geometryComponent1 = system2.GetComponent(Name="Geometry")
geometryComponent2 = system1.GetComponent(Name="Geometry")
geometryComponent1.ReplaceWithShare(
    TargetSystem=system2,
    ComponentToShare=geometryComponent2,
    SourceSystem=system1)
modelComponent1 = system2.GetComponent(Name="Model")
modelComponent1.Refresh()
model1 = system2.GetContainer(ComponentName="Model")
model1.Edit()
Save(Overwrite=True)
engineeringData1 = system2.GetContainer(ComponentName="Engineering Data")
matl1 = engineeringData1.CreateMaterial(Name="homogonized_orthothropic")
matlProp1 = matl1.CreateProperty(
    Name="Elasticity",
    Behavior="Orthotropic",
    Qualifiers={"Definition": "", "Behavior": "Orthotropic"})
matlProp1.SetData(
    SheetName="Elasticity",
    SheetQualifiers={"Definition": "", "Behavior": "Orthotropic"},
    Index=-1,
    Variables=["Young's Modulus X direction"],
    Values=[["113750000000 [Pa]"]])
matlProp1.SetData(
    SheetName="Elasticity",
    SheetQualifiers={"Definition": "", "Behavior": "Orthotropic"},
    Variables=["Young's Modulus Y direction"],
    Values=[["7583000000 [Pa]"]])
matlProp1.SetData(
    SheetName="Elasticity",
    SheetQualifiers={"Definition": "", "Behavior": "Orthotropic"},
    Variables=["Young's Modulus Z direction"],
    Values=[["7583000000 [Pa]"]])
matlProp1.SetData(
    SheetName="Elasticity",
    SheetQualifiers={"Definition": "", "Behavior": "Orthotropic"},
    Variables=["Poisson's Ratio XY"],
    Values=[["0.32"]])
matlProp1.SetData(
    SheetName="Elasticity",
    SheetQualifiers={"Definition": "", "Behavior": "Orthotropic"},
    Variables=["Poisson's Ratio YZ"],
    Values=[["0.37"]])
matlProp1.SetData(
    SheetName="Elasticity",
    SheetQualifiers={"Definition": "", "Behavior": "Orthotropic"},
    Variables=["Poisson's Ratio XZ"],
    Values=[["0.35"]])
matlProp1.SetData(
    SheetName="Elasticity",
    SheetQualifiers={"Definition": "", "Behavior": "Orthotropic"},
    Variables=["Shear Modulus XY"],
    Values=[["5440000000 [Pa]"]])
matlProp1.SetData(
    SheetName="Elasticity",
    SheetQualifiers={"Definition": "", "Behavior": "Orthotropic"},
    Variables=["Shear Modulus YZ"],
    Values=[["2964000000 [Pa]"]])
matlProp1.SetData(
    SheetName="Elasticity",
    SheetQualifiers={"Definition": "", "Behavior": "Orthotropic"},
    Variables=["Shear Modulus XZ"],
    Values=[["2964000000 [Pa]"]])
matlProp2 = matl1.CreateProperty(
    Name="Density",
    Qualifiers={"Definition": "", "Behavior": ""})
matlProp2.SetData(
    Index=-1,
    Variables=["Density"],
    Values=[["1550 [kg m^-3]"]])
Save(Overwrite=True)
modelComponent1.Refresh()
Save(Overwrite=True)
model1.Exit()
solutionComponent1 = system1.GetComponent(Name="Solution")
setupComponent1 = system2.GetComponent(Name="Setup")
solutionComponent1.TransferData(TargetComponent=setupComponent1)
modelComponent1.Refresh()
setupComponent1.Refresh()
setup1 = system2.GetContainer(ComponentName="Setup")
setup1.Edit()
Save(Overwrite=True)
model1.Exit()
template2 = GetTemplate(TemplateName="Results")
system3 = template2.CreateSystem(
    Position="Right",
    RelativeTo=system2)
system2.DisplayText = "FEA"
resultsComponent1 = system3.GetComponent(Name="Results")
solutionComponent1.TransferData(TargetComponent=resultsComponent1)
solutionComponent2 = system2.GetComponent(Name="Solution")
solutionComponent2.TransferData(TargetComponent=resultsComponent1)
Save(Overwrite=True)
results1 = system3.GetContainer(ComponentName="Results")
results1.Edit()
results1.SendCommand(Command="> autolegend plot=/CONTOUR:disp, view=VIEW:View 1")
results1.SendCommand(Command="""CONTOUR:disp
Apply Instancing Transform = On
Clip Contour = Off
Colour Map = Default Colour Map
Colour Scale = Linear
Colour Variable = Total Mesh Displacement
Colour Variable Boundary Values = Conservative
Constant Contour Colour = Off
Contour Range = Global
Culling Mode = No Culling
Domain List = /DOMAIN GROUP:All Domains
Draw Contours = On
Font = Sans Serif
Fringe Fill = On
Instancing Transform = /DEFAULT INSTANCE TRANSFORM:Default Transform
Lighting = On
Line Colour = 0, 0, 0
Line Colour Mode = Default
Line Width = 1
Location List = Fam_12
Max = 0.0 [m]
Min = 0.0 [m]
Number of Contours = 11
Show Numbers = Off
Specular Lighting = On
Surface Drawing = Smooth Shading
Text Colour = 0, 0, 0
Text Colour Mode = Default
Text Height = 0.024
Transparency = 0.0
Use Face Values = Off
Value List = 0 [m],1 [m]
  OBJECT VIEW TRANSFORM:
  Apply Reflection = Off
  Apply Rotation = Off
  Apply Scale = Off
  Apply Translation = Off
  Principal Axis = Z
  Reflection Plane Option = XY Plane
  Rotation Angle = 0.0 [degree]
  Rotation Axis From = 0 [m], 0 [m], 0 [m]
  Rotation Axis To = 0 [m], 0 [m], 0 [m]
  Rotation Axis Type = Principal Axis
  Scale Vector = 1 , 1 , 1 
  Translation Vector = 0 [m], 0 [m], 0 [m]
  X = 0.0 [m]
  Y = 0.0 [m]
  Z = 0.0 [m]
  END
END""")
results1.SendCommand(Command="""# Sending visibility action from ViewUtilities
>show /CONTOUR:disp, view=/VIEW:View 1""")
results1.Exit()
Save(Overwrite=True)
